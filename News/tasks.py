from celery import shared_task
from News.models import Post, Category
from datetime import datetime, timedelta
from django.core.mail import send_mail
from django.contrib.sites.models import Site
import logging

logger = logging.getLogger(__name__)


def send_email(subscriber, subject, message):
    try:
        send_mail(
            subject=subject,
            message=message,
            from_email='charliebrownkb3@gmail.com',
            recipient_list=[subscriber.email],
            fail_silently=False,
        )
        logger.info(f'–ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {subscriber.email}')
        return True
    except Exception as e:
        logger.exception(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞ {subscriber.email}: {e}')
        return False


@shared_task
def weekly_email():

    # –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥–æ–º–µ–Ω–∞ —Å–∞–π—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é
    current_site = Site.objects.get_current()
    domain = current_site.domain

    # –æ—Ç–±–∏—Ä–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–≤—Å–∫—Ä
    now = datetime.now()
    monday = now - timedelta(days=now.weekday())
    sunday = monday + timedelta(days=6)

    posts = Post.objects.filter(publication_date_gte=monday, publication_date_lte=sunday)

    success_count = 0
    failure_count = 0

    for category in Category.objects.all():
        subscribers = category.subscribers.all()

        for subscriber in subscribers:
            subscriber_posts = posts.filter(category=category)

            if subscriber_posts:
                subject = '–ü—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞ –ø—Ä–æ—à–µ–¥—à—É—é –Ω–µ–¥–µ–ª—é'
                message = (
                    f'‚úä –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {subscriber.username}!\n'
                    f'–í–æ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ "{category.category_name}" –∑–∞ –ø—Ä–æ—à–µ–¥—à—É—é –Ω–µ–¥–µ–ª—é:\n'
                )
                for post in subscriber_posts:
                    relative_url = post.get_absolute_url()
                    full_url = f'http://{domain}{relative_url}'
                    message += f'" {post.title}". –ß–∏—Ç–∞—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ: {full_url}\n'
                message += '\n'

                if send_email(subscriber, subject, message):
                    success_count += 1
                else:
                    failure_count += 1

            logger.info(f"–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. "
                        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–∏—Å–µ–º: {success_count}, "
                        f"–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–∏—Å–µ–º: {failure_count}")
            return {'success': success_count, 'failure': failure_count}


@shared_task
def new_post_notification(post_id):
    try:
        post = Post.objects.get(pk=post_id)
        current_site = Site.objects.get_current()
        domain = current_site.domain
        all_categories = ', '.join(category.category_name for category in post.category.all())
        categories_count = post.category.count()
        section_intro = (
            "–ù–æ–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤ —Ç–≤–æ–µ–º –ª—é–±–∏–º–æ–º —Ä–∞–∑–¥–µ–ª–µ"
            if categories_count == 1
            else "–ù–æ–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤ —Ç–≤–æ–∏—Ö –ª—é–±–∏–º—ã—Ö —Ä–∞–∑–¥–µ–ª–∞—Ö"
        )

        for category in post.category.all():
            subscribers = category.subscribers.all()
            for subscriber in subscribers:
                relative_url = post.get_absolute_url()
                full_url = f'http://{domain}{relative_url}'
                subject = f'{post.title}'
                message = (
                    f'üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {subscriber.username}!\n\n'
                    f'{section_intro}: {all_categories}\n\n'
                    f'{post.text[:200]}...\n\n'
                    f'–ß–∏—Ç–∞–π –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ —Å—Å—ã–ª–∫–µ: {full_url}'
                )
                send_email(subscriber, subject, message)
    except Exception as e:
        logger.exception(f"Error processing post notification for post {post_id}: {e}")




